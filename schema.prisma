// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String  @db.Uuid
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    role          UserRole   @default(USER)
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    eventLogs     EventLog[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// The main model for the app
model Test {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @unique
    isActive  Boolean   @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    versions  Version[]
}

model Version {
    id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    testId       String        @db.Uuid
    label        String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt
    test         Test          @relation(fields: [testId], references: [id], onDelete: Cascade)
    featureFlags FeatureFlag[]
    eventLogs    EventLog[]

    @@unique([testId, label])
}

model EventLog {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    versionId String   @db.Uuid
    userId    String   @unique @db.Uuid
    isClicked Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    version   Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Component {
    id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    domId        String        @unique
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt
    featureFlags FeatureFlag[]
}

model FeatureFlag {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    componentId String    @db.Uuid
    versionId   String    @db.Uuid
    isActive    Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now()) @updatedAt
    component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
    version     Version   @relation(fields: [versionId], references: [id], onDelete: Cascade)

    @@unique([componentId, versionId])
}
